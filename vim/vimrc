execute pathogen#infect()
call pathogen#helptags()

set rtp+=/usr/lib/python3/dist-packages/powerline/bindings/vim/
set laststatus=2
set t_Co=256

set shell=/bin/zsh

" Basic settings {{{
set nocompatible

let mapleader = " "
let localleader = "\\"

" Turn on line numbering. Turn it off with "set nonu"
set number
" set nowrap
" Indent automatically depending on filetype
filetype indent on
set autoindent
set smartindent

set backspace=indent,eol,start

set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab

filetype plugin on
syntax on

set showmatch "brackets

" Enable mouse
set mouse=a

" Display the current mode and partially-typed commands in the status line
set showmode
set showcmd

set scrolloff=2

set title

set hlsearch
nohlsearch
set incsearch

" List completions
set wildmode=longest:list,full

set langmap=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,ю.,ё',ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х\{,Ъ\},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж\:,Э\",ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б\<,Ю\>
set encoding=utf-8 nobomb

set list
set listchars=tab:»\ ,trail:·,extends:>,nbsp:.

" Set insensitive search
set ic

" Highlight search
set hls

" Wrap text instead of being on one line
set lbr

" Change colorscheme from default to delek
colorscheme elflord

" Save 50 lines of command-line (etc) history
set history=50

" Source vim in working directories
set exrc
set secure

" Automaticaly call :RustFmt to format rust code when saving a buffer
let g:rustfmt_autosave = 1
" }}}

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1

" Status line settings {{{
" Always show status line
if has("statusline") && !&cp
	set laststatus=2

	set statusline=
	set statusline+=%1*            " User1 highlight
	set statusline+=\ [%n]         " Buffer number
	set statusline+=\ %{GetGitBranchName()}        " Git branch name
	set statusline+=\ [%f]         " File path
	set statusline+=%m             " Modified flag
	set statusline+=%r             " Readonly flag
	set statusline+=%h             " Help file flag
	set statusline+=%w             " Preview window flag
	set statusline+=%y             " File type
	set statusline+=[
	set statusline+=%{&ff}         " File format
	set statusline+=:
	set statusline+=%{strlen(&fenc)?&fenc:'none'}  " File encoding
	set statusline+=]
	set statusline+=%=             " Left/Right separator
	set statusline+=%c             " File encoding
	set statusline+=,
	set statusline+=%l             " Current line number
	set statusline+=/
	set statusline+=%L             " Total number of lines
	set statusline+=\ (%P)\        " Percent through file
endif
"" }}}

let g:airline_theme='hybridline'
"" highlight ColorColumn ctermbg=magenta
"" set colorcolumn=81

" NERDTree settings {{{
let NERDTreeShowHidden = 1
let NERDTreeMinimalUI = 0

"autocmd VimEnter * NERDTree
"autocmd VimEnter * wincmd p
"autocmd BufEnter * NERDTreeMirror
autocmd VimEnter *
	\ if argc() == 0 && !exists("s:std_in") |
	\ NERDTree |
	\ elseif argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") |
	\ bd |
	\ exec 'cd' fnameescape(argv(0)) |
	\ NERDTree | wincmd p | ene | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"CTRL-t to toggle tree view with CTRL-t
nmap <silent> <C-t> :NERDTreeToggle<CR>
"Set F2 to put the cursor to the nerdtree
nmap <silent> <F2> :NERDTreeFind<CR>
let g:NERDTreeMapActivateNode="<F2>"
let g:NERDTreeMapPreview="<F3>"

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

"" }}}

let g:SuperTabDefaultCompletionType = "<c-n>"

" C & C++ settings {{{
augroup filetype_c
	autocmd!
	autocmd FileType c,cpp setlocal cindent
	" Problem: the actual implementation of `/usr/share/clang/clang-format.py`
	" does not allow to give the path of a configuration path.
	"let g:syntastic_cpp_checkers = ['clang_tidy']
	let g:syntastic_c_checkers = ['clang_tidy']
	let g:syntastic_cpp_clang_tidy_args = '-extra-arg=--std=c++17 -header-filter=".*" -checks="*,-android-*,-bugprone-bool-pointer-implicit-conversion,-cert-env33-c,-cert-dcl50-cpp,-cert-dcl59-cpp,-cppcoreguidelines-no-malloc,-cppcoreguidelines-owning-memory,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-cppcoreguidelines-pro-bounds-constant-array-index,-cppcoreguidelines-pro-bounds-pointer-arithmetic,-cppcoreguidelines-pro-type-const-cast,-cppcoreguidelines-pro-type-cstyle-cast,-cppcoreguidelines-pro-type-reinterpret-cast,-cppcoreguidelines-pro-type-union-access,-cppcoreguidelines-pro-type-vararg,-cppcoreguidelines-special-member-functions,-fuchsia-*,-google-*,google-default-arguments,google-explicit-constructor,google-runtime-member-string-references,google-runtime-operator,-hicpp-braces-around-statements,-hicpp-named-parameter,-hicpp-no-array-decay,-hicpp-no-assembler,-hicpp-no-malloc,-hicpp-function-size,-hicpp-special-member-functions,-hicpp-vararg,-llvm-*,-objc-*,-readability-magic-numbers,-readability-else-after-return,-readability-implicit-bool-conversion,-readability-named-parameter,-readability-simplify-boolean-expr,-readability-braces-around-statements,-readability-identifier-naming,-readability-function-size,-readability-redundant-member-init,-misc-bool-pointer-implicit-conversion,-misc-definitions-in-headers,-misc-unused-alias-decls,-misc-unused-parameters,-misc-unused-using-decls,-modernize-use-using,-modernize-use-default-member-init,-clang-analyzer-*"' " -clang-diagnostic-*

	map <C-K> :pyf /usr/share/clang/clang-format.py<cr>
	imap <C-K> <c-o> :pyf /usr/share/clang/clang-format.py<cr>
	function! FormatOnSave()
		let l:formatdiff = 1
		pyf /usr/share/clang/clang-format.py
	endfunction
	autocmd BufWritePre *.h,*.cc,*.cpp call FormatOnSave()
augroup end
" }}}

" Vimscript file settings {{{
augroup filetype_vim
	autocmd!
	autocmd FileType vim setlocal foldmethod=marker

	autocmd FileType vim setlocal nolinebreak

	" Insert <leader> and <Esc>
	autocmd FileType vim inoremap <buffer> <C-l> <lt>leader>
	autocmd FileType vim inoremap <buffer> <C-V><Esc> <lt>Esc>
	autocmd FileType vim inoremap <buffer> <C-V><CR> <lt>CR>

	autocmd FileType vim nnoremap <buffer> <F5> :source %<CR>

	autocmd FileType vim setlocal keywordprg=:help
augroup end
" }}}

" Markdown file settings {{{
augroup filetype_markdown
	autocmd!
	autocmd FileType markdown setlocal wrap
	autocmd FileType markdown setlocal linebreak
	autocmd FileType markdown nnoremap <buffer> j gj
	autocmd FileType markdown nnoremap <buffer> k gk
augroup end
" }}}

let g:airline_powerline_fonts = 1
let g:vim_markdown_folding_disabled=1

" YCM settings {{{
"let g:clang_library_path = "/usr/lib64/"
"let g:clang_complete_copen = 0
"let g:clang_hl_errors = 1
"let g:clang_snippets = 1
"let g:clang_snippets_engine = "ultisnips"
"let g:clang_close_preview = 1
"let g:clang_complete_macros = 1

"let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_autoclose_preview_window_after_insertion = 1
"let g:ycm_use_ultisnips_completer = 1
"let g:ycm_key_list_select_completion=[]
"let g:ycm_key_list_previous_completion=[]

"let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
"" let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_config.py"
" }}}

" path to directory where library can be found
"let g:clang_library_path='/usr/lib/llvm-4.0/lib'
" or path directly to the library file
let g:clang_library_path='/usr/lib64/'

let g:netrw_altv = 1

let g:load_doxygen_syntax = 1

let g:ctrlp_map = '<c-u>'

" Ocaml settins {{{
filetype indent on
filetype plugin on
au BufRead,BufNewFile *.ml,*.mli compiler ocaml
syntax on

set rtp+=/home/terae/.opam/system/share/ocp-index/vim
set rtp^="/home/terae/.opam/system/share/ocp-indent/vim"

let g:syntastic_ocaml_checkers = ['merlin']

" ## added by OPAM user-setup for vim / base ## 93ee63e278bdfc07d1139a748ed3fff2 ## you can edit, but keep this line
let s:opam_share_dir = system("opam config var share")
let s:opam_share_dir = substitute(s:opam_share_dir, '[\r\n]*$', '', '')

let s:opam_configuration = {}

function! OpamConfOcpIndent()
  execute "set rtp^=" . s:opam_share_dir . "/ocp-indent/vim"
endfunction
let s:opam_configuration['ocp-indent'] = function('OpamConfOcpIndent')

function! OpamConfOcpIndex()
  execute "set rtp+=" . s:opam_share_dir . "/ocp-index/vim"
endfunction
let s:opam_configuration['ocp-index'] = function('OpamConfOcpIndex')

function! OpamConfMerlin()
  let l:dir = s:opam_share_dir . "/merlin/vim"
  execute "set rtp+=" . l:dir
endfunction
let s:opam_configuration['merlin'] = function('OpamConfMerlin')

let s:opam_packages = ["ocp-indent", "ocp-index", "merlin"]
let s:opam_check_cmdline = ["opam list --installed --short --safe --color=never"] + s:opam_packages
let s:opam_available_tools = split(system(join(s:opam_check_cmdline)))
for tool in s:opam_packages
  " Respect package order (merlin should be after ocp-index)
  if count(s:opam_available_tools, tool) > 0
    call s:opam_configuration[tool]()
  endif
endfor
" ## end of OPAM user-setup addition for vim / base ## keep this line
" ## added by OPAM user-setup for vim / ocp-indent ## 870849d1e2d624149762e89fa14ca869 ## you can edit, but keep this line
if count(s:opam_available_tools,"ocp-indent") == 0
	source "/home/terae/.opam/default/share/ocp-indent/vim/indent/ocaml.vim"
endif
" ## end of OPAM user-setup addition for vim / ocp-indent ## keep this line

set rtp+=<SHARE_DIR>/merlin/vim

" only show the expected type when there are more than one candidate
let g:merlin_completion_arg_type = "several"

" Automatic completion with Supertab
au FileType ocaml call SuperTabSetDefaultCompletionType("<c-x><c-o>")

" }}}

" Mapping settings {{{
	" Fast saving and closing
	nnoremap <leader><leader> :w<cr>
	nnoremap <leader>q :q!<cr>
	nnoremap <leader>w :wq<cr>

	" Automatic toggling between line number modes
	nmap <silent> <C-n> :set relativenumber!<CR>

	" Deactivation of the directional keys
	"map <up> <nop>
	"map <down> <nop>
	"map <left> <nop>
	"map <right> <nop>
	"imap <up> <nop>
	"imap <down> <nop>
	"imap <left> <nop>
	"imap <right> <nop>
	" map jk <Esc>
	" map kj <Esc>
	inoremap jk <Esc>
	inoremap kj <Esc>
" }}}
"
function! GetGitBranchName()
	let branchName = ""

	if exists("g:loaded_fugitive")
		let branchName = "[" . fugitive#head() . "]"
	endif

	return branchName
endfunction

